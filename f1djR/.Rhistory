zz = unique(merge(zz,qq[,c('constructorId','constructorName')]))
g=driverPosTeamQuali(zz[zz$round==round,])
g
#f1_2018_aus_quali_intra_faceoff
zz
qq=qualiResults.df(year,round)
#patch
qq$constructorId <- as.character(qq$constructorId)
#Need the character cast otherwise we lose the constructorId value to a factor number
qq$constructorId = ifelse(qq$code %in% c('HAR','GAS'), 'toro_rosso', qq$constructorId )
qq$constructorId <- as.factor(qq$constructorId)
neworder = as.character(unique(qq$constructorId[order(qq$pos )]))
#levels=rev(levels(sizes)
qq$constructorId = factor(qq$constructorId, levels = neworder )
zz=ddply(qq, .(constructorId,round), summarise, drivers = paste(code,collapse = "::"), positions=paste(position,collapse = "::"))
#strsplit(zz$drivers,'::')
tmpr=function(x,n){
s1=strsplit(x,'::')[[1]]
s1[n]
}
tmpri=function(x,n){
s1=strsplit(x,'::')[[1]]
as.integer(s1[n])
}
zz=ddply(zz, .(constructorId) ,mutate, code.x=tmpr(drivers,1), code.y=tmpr(drivers,2),
position.x=tmpri(positions,1), position.y=tmpri(positions,2))
#levels(zz$d1)=levels(qq$code)
#levels(zz$d2)=levels(qq$code)
zz=ddply(zz, .(round,constructorId), transform,
d1pos=max(position.x, position.y),
d2pos=min(position.x, position.y))
zz$topd2=(zz$position.x>zz$position.y)
zz = merge(zz,qq[,c('constructorId','constructorName')])
g=driverPosTeamQuali(zz[zz$round==round,])
g
#f1_2018_aus_quali_intra_faceoff
zz
qq=qualiResults.df(year,round)
#patch
qq$constructorId <- as.character(qq$constructorId)
#Need the character cast otherwise we lose the constructorId value to a factor number
qq$constructorId = ifelse(qq$code %in% c('HAR','GAS'), 'toro_rosso', qq$constructorId )
qq$constructorId <- as.factor(qq$constructorId)
neworder = as.character(unique(qq$constructorId[order(qq$pos )]))
#levels=rev(levels(sizes)
qq$constructorId = factor(qq$constructorId, levels = neworder )
zz=ddply(qq, .(constructorId,round), summarise, drivers = paste(code,collapse = "::"), positions=paste(position,collapse = "::"))
#strsplit(zz$drivers,'::')
tmpr=function(x,n){
s1=strsplit(x,'::')[[1]]
s1[n]
}
tmpri=function(x,n){
s1=strsplit(x,'::')[[1]]
as.integer(s1[n])
}
zz=ddply(zz, .(constructorId) ,mutate, code.x=tmpr(drivers,1), code.y=tmpr(drivers,2),
position.x=tmpri(positions,1), position.y=tmpri(positions,2))
#levels(zz$d1)=levels(qq$code)
#levels(zz$d2)=levels(qq$code)
zz=ddply(zz, .(round,constructorId), transform,
d1pos=max(position.x, position.y),
d2pos=min(position.x, position.y))
zz$topd2=(zz$position.x>zz$position.y)
zz = merge(zz,qq[,c('constructorId','constructorName')])
g=driverPosTeamQuali(zz[zz$round==round,])
g
#f1_2018_aus_quali_intra_faceoff
qq=qualiResults.df(year)
#patch
qq$constructorId <- as.character(qq$constructorId)
#Need the character cast otherwise we lose the constructorId value to a factor number
qq$constructorId = ifelse(qq$code %in% c('HAR','GAS'), 'toro_rosso', qq$constructorId )
qq$constructorId <- as.factor(qq$constructorId)
neworder = as.character(unique(qq$constructorId[order(qq$pos )]))
#levels=rev(levels(sizes)
qq$constructorId = factor(qq$constructorId, levels = neworder )
zz=ddply(qq, .(constructorId,round), summarise, drivers = paste(code,collapse = "::"), positions=paste(position,collapse = "::"))
#strsplit(zz$drivers,'::')
tmpr=function(x,n){
s1=strsplit(x,'::')[[1]]
s1[n]
}
tmpri=function(x,n){
s1=strsplit(x,'::')[[1]]
as.integer(s1[n])
}
zz=ddply(zz, .(constructorId) ,mutate, code.x=tmpr(drivers,1), code.y=tmpr(drivers,2),
position.x=tmpri(positions,1), position.y=tmpri(positions,2))
#levels(zz$d1)=levels(qq$code)
#levels(zz$d2)=levels(qq$code)
zz=ddply(zz, .(round,constructorId), transform,
d1pos=max(position.x, position.y),
d2pos=min(position.x, position.y))
zz$topd2=(zz$position.x>zz$position.y)
zz = unique(merge(zz,qq[,c('constructorId','constructorName')]))
g=driverPosTeamQuali(zz[zz$round==round,])
g
#f1_2018_aus_quali_intra_faceoff
zz
zz
driverPos(zz[zz$constructorId=='ferrari',])
zz
#driverPos(zz[zz$constructorId=='ferrari',])
qq=qualiResults.df(year, round)
#patch
qq$constructorId <- as.character(qq$constructorId)
#Need the character cast otherwise we lose the constructorId value to a factor number
qq$constructorId = ifelse(qq$code %in% c('HAR','GAS'), 'toro_rosso', qq$constructorId )
qq$constructorId <- as.factor(qq$constructorId)
neworder = as.character(unique(qq$constructorId[order(qq$pos )]))
#levels=rev(levels(sizes)
qq$constructorId = factor(qq$constructorId, levels = neworder )
zz=ddply(qq, .(constructorId,round), summarise, drivers = paste(code,collapse = "::"), positions=paste(position,collapse = "::"))
#strsplit(zz$drivers,'::')
tmpr=function(x,n){
s1=strsplit(x,'::')[[1]]
s1[n]
}
tmpri=function(x,n){
s1=strsplit(x,'::')[[1]]
as.integer(s1[n])
}
zz=ddply(zz, .(constructorId,round ) ,mutate, code.x=tmpr(drivers,1), code.y=tmpr(drivers,2),
position.x=tmpri(positions,1), position.y=tmpri(positions,2))
#levels(zz$d1)=levels(qq$code)
#levels(zz$d2)=levels(qq$code)
zz=ddply(zz, .(round,constructorId), transform,
d1pos=max(position.x, position.y),
d2pos=min(position.x, position.y))
zz$topd2=(zz$position.x>zz$position.y)
zz = unique(merge(zz,qq[,c('constructorId','constructorName')]))
g=driverPosTeamQuali(zz[zz$round==round,])
g
#f1_2018_aus_quali_intra_faceoff
zz
#driverPos(zz[zz$constructorId=='ferrari',])
#qq=qualiResults.df(year, round)
qq=qualiResults.df(year)
#patch
qq$constructorId <- as.character(qq$constructorId)
#Need the character cast otherwise we lose the constructorId value to a factor number
qq$constructorId = ifelse(qq$code %in% c('HAR','GAS'), 'toro_rosso', qq$constructorId )
qq$constructorId <- as.factor(qq$constructorId)
neworder = as.character(unique(qq$constructorId[order(qq$pos )]))
#levels=rev(levels(sizes)
qq$constructorId = factor(qq$constructorId, levels = neworder )
zz=ddply(qq, .(constructorId,round), summarise, drivers = paste(code,collapse = "::"), positions=paste(position,collapse = "::"))
#strsplit(zz$drivers,'::')
tmpr=function(x,n){
s1=strsplit(x,'::')[[1]]
s1[n]
}
tmpri=function(x,n){
s1=strsplit(x,'::')[[1]]
as.integer(s1[n])
}
zz=ddply(zz, .(constructorId,round ) ,mutate, code.x=tmpr(drivers,1), code.y=tmpr(drivers,2),
position.x=tmpri(positions,1), position.y=tmpri(positions,2))
#levels(zz$d1)=levels(qq$code)
#levels(zz$d2)=levels(qq$code)
zz=ddply(zz, .(round,constructorId), transform,
d1pos=max(position.x, position.y),
d2pos=min(position.x, position.y))
zz$topd2=(zz$position.x>zz$position.y)
zz = unique(merge(zz,qq[,c('constructorId','constructorName')]))
g=driverPosTeamQuali(zz[zz$round==round,])
g
#f1_2018_aus_quali_intra_faceoff
zz
#driverPos(zz[zz$constructorId=='ferrari',])
zz
driverPos(zz[zz$constructorId=='ferrari',])
zz
driverPos(zz[zz$constructorId=='mercedes',])
zz
driverPos(zz[zz$constructorId=='mercedes',])++scale_x_discrete( labels=c('d','f','g','w'))
zz
driverPos(zz[zz$constructorId=='mercedes',])+scale_x_discrete( labels=c('d','f','g','w'))
zz
driverPos(zz[zz$constructorId=='mercedes',])+scale_x_discrete( labels=c('d','f','g','w','q'))
zz
driverPos(zz[zz$constructorId=='mercedes',])+xlim(0,20)
zz
driverPos(zz[zz$constructorId=='mercedes',])+xlim(1,20)
zz
driverPos(zz[zz$constructorId=='mercedes',])+xlim(1,21)
zz
driverPos(zz[zz$constructorId=='mercedes',])+xlim(1,21)
zz
driverPos(zz[zz$constructorId=='mercedes',])+xlim(1,21)
zz
driverPos(zz[zz$constructorId=='mercedes',])+xlim(1,21)
zz
driverPos(zz[zz$constructorId=='williams',])+xlim(1,21)
zz
#driverPos(zz[zz$constructorId=='williams',])+xlim(1,21)
#qq=qualiResults.df(year, round)
qq=qualiResults.df(year)
#patch
qq$constructorId <- as.character(qq$constructorId)
#Need the character cast otherwise we lose the constructorId value to a factor number
qq$constructorId = ifelse(qq$code %in% c('HAR','GAS'), 'toro_rosso', qq$constructorId )
qq$constructorId <- as.factor(qq$constructorId)
neworder = as.character(unique(qq$constructorId[order(qq$pos )]))
#levels=rev(levels(sizes)
qq$constructorId = factor(qq$constructorId, levels = neworder )
zz=ddply(qq[order(qq$code),], .(constructorId,round), summarise, drivers = paste(code,collapse = "::"), positions=paste(position,collapse = "::"))
#strsplit(zz$drivers,'::')
tmpr=function(x,n){
s1=strsplit(x,'::')[[1]]
s1[n]
}
tmpri=function(x,n){
s1=strsplit(x,'::')[[1]]
as.integer(s1[n])
}
zz=ddply(zz, .(constructorId,round ) ,mutate, code.x=tmpr(drivers,1), code.y=tmpr(drivers,2),
position.x=tmpri(positions,1), position.y=tmpri(positions,2))
#levels(zz$d1)=levels(qq$code)
#levels(zz$d2)=levels(qq$code)
zz=ddply(zz, .(round,constructorId), transform,
d1pos=max(position.x, position.y),
d2pos=min(position.x, position.y))
zz$topd2=(zz$position.x>zz$position.y)
zz = unique(merge(zz,qq[,c('constructorId','constructorName')]))
g=driverPosTeamQuali(zz[zz$round==round,])
g
#f1_2018_aus_quali_intra_faceoff
zz
#driverPos(zz[zz$constructorId=='williams',])+xlim(1,21)
zz
driverPos(zz[zz$constructorId=='williams',])+xlim(1,21)
stub='chn'
year=2018
country='China'
raceNum=3
lapTimes=lapsData.df(year,raceNum)
head(lapTimes)
g=ggplot(lapTimes)
ddply(lapTimes,.(lap),transform,p1=min(rawtime)-rawtime)
l2=ddply(lapTimes,.(lap),transform,p1=rawtime-rawtime)
g=ggplot(l2[l2$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=p1,y=lap))
g
g=ggplot(l2[l2$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=p1))
g
l2[l2$driverId=='raikkonen',]
head(l2)
l2=ddply(lapTimes,.(lap),transform,p1=rawtime-rawtime)
head(l2)
l2=ddply(lapTimes,.(lap),transform,p1=rawtime-min(rawtime))
g=ggplot(l2[l2$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=p1))
g
g=ggplot(l2[l2$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=-p1))
g
g=ggplot(l2[l2$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=p1))
g
g=ggplot(l2[l2$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=p1,group=driverId))
g
ggplot(l2)+geom_bar(stat='identity',aes(x=lap,y=p1,group=driverId))
ggplot(l2)+geom_bar(stat='identity',aes(x=lap,y=p1))+facet_wrap(~driverId)
l2=ddply(lapTimes,.(lap),transform,p2=cuml-min(rawtime))
g=ggplot(l2[l2$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=p2))
g
l2=ddply(lapTimes,.(lap),transform,p2=cuml-min(cuml))
g=ggplot(l2[l2$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=p2))
g
l2=ddply(lapTimes,.(lap),transform,p3=c(0,diff(p2))
)
l2=ddply(l2,.(lap),transform,p3=c(0,diff(p2))
)
l2=ddply(l2,.(lap),transform,p1=rawtime-min(rawtime))
g=ggplot(l2[l2$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=p3))
g
g=ggplot(l2[l2$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=p1))
g
g=ggplot(l2[l2$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=p3))
g
g=ggplot(l2[l2$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=p2))
g
head(ll2)
head(l2)
g=ggplot(l2[l2$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=p3))
g
l2=ddply(lapTimes,.(lap),transform,p1=rawtime-min(rawtime))
l2=ddply(lapTimes,.(lap),transform,p2=cuml-min(cuml))
l2=ddply(l2,.(lap),transform,p2=cuml-min(cuml))
l2=ddply(l2,.(driverId),transform,p3=c(0,diff(p2))
)
g=ggplot(l2[l2$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=p3))
g
g+ylim(-5,5)
g+coord_cartesian(ylim=c(-5, 5))
l2=ddply(l2,.(lap),transform,p4=c(0,diff(cuml)))
melt(l2,id.vars=c('driverId','lap'),measure.vars=c('p2','p4'))
library(reshape)
melt(l2,id.vars=c('driverId','lap'),measure.vars=c('p2','p4'))
l3=melt(l2,id.vars=c('driverId','lap'),measure.vars=c('p2','p4'))
g=ggplot(l3[l3$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=value,group=variable))
g
g=ggplot(l3[l3$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=value,group=variable,position ="dodge"))
g=ggplot(l3[l3$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=value,group=variable),position ="dodge")
g
g=ggplot(l3[l3$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=value,fill=variable),position ="dodge")
g
heap(battlemap_encoder(lapTimes))
hea(battlemap_encoder(lapTimes))
head(battlemap_encoder(lapTimes))
l4=battlemap_encoder(lapTimes)
l4=ddply(l4,.(ldriverIdap),transform,ddiff=c(0,diff(diff)))
l4=ddply(l4,.(driverId),transform,ddiff=c(0,diff(diff)))
l4=ddply(l4,.(driverId),transform,dgap=c(0,diff(dgap)))
l4=ddply(l4,.(driverId),transform,dgap=c(0,diff(gap)))
ggplot(l4[l4$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=value,group=variable),position ="dodge")
l4m=melt(l4,id.vars=c('driverId','lap'),measure.vars=c('ddiff','dgap'))
ggplot(l4m[l4m$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=value,group=variable),position ="dodge")
ggplot(l4m[l4m$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=value,fill=variable),position ="dodge")
ggplot(l4m[l4m$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=value,fill=variable),position ="dodge")+coord_cartesian(ylim=c(-10, 10))
l4=ddply(l4,.(driverId),transform,dchasediff=c(0,diff(chasediff)))
l4m=melt(l4,id.vars=c('driverId','lap'),measure.vars=c('ddiff','dgap','dchasediff'))
ggplot(l4m[l4m$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=value,fill=variable),position ="dodge")+coord_cartesian(ylim=c(-10, 10))
ggplot(l4m[l4m$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=value,fill=variable),position ="dodge")+coord_cartesian(ylim=c(-5, 5))
l4=ddply(l4,.(driverId),transform,dchasediff=c(0,diff(-chasediff)))
l4m=melt(l4,id.vars=c('driverId','lap'),measure.vars=c('ddiff','dgap','dchasediff'))
ggplot(l4m[l4m$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=value,fill=variable),position ="dodge")+coord_cartesian(ylim=c(-5, 5))
l4=ddply(l4,.(driverId),transform,dchasediff=c(0,diff(chasediff)))
l4m=melt(l4,id.vars=c('driverId','lap'),measure.vars=c('ddiff','dgap','dchasediff'))
ggplot(l4m[l4m$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=value,fill=variable),position ="dodge")+coord_cartesian(ylim=c(-5, 5))
tail(lapTimes)
lapTimes[lapTimes$lap==max(lapTimes$lap),]
5736.380+8.894
ggplot(l4m[l4m$driverId=='raikkonen',])+geom_bar(stat='identity',aes(x=lap,y=value))+coord_cartesian(ylim=c(-5, 5))+facet_wrap(~variable)
q=paste0('SELECT COUNT(code) AS poles FROM drivers d JOIN results rs JOIN races r ',cctclause,' r.raceId=rs.raceId AND d.code IN ("',driverCode,'") AND d.driverId=rs.driverId AND rs.grid=1 ',uptoclause,yearclause, beforeroundclause)
dbGetQuery(ergastdb, q)
library(RMySQL)
ergastdb=dbConnect(MySQL(),user='root',
password='f1',host='127.0.0.1',port=3399,dbname='ergastdb')
q=paste0('SELECT COUNT(code) AS poles FROM drivers d JOIN results rs JOIN races r ',cctclause,' r.raceId=rs.raceId AND d.code IN ("',driverCode,'") AND d.driverId=rs.driverId AND rs.grid=1 ',uptoclause,yearclause, beforeroundclause)
dbGetQuery(ergastdb, q)
q=paste0('SELECT COUNT(code) AS wins FROM drivers d JOIN results rs JOIN races r ',cctclause,' r.raceId=rs.raceId AND d.code IN ("hamilton") AND d.driverId=rs.driverId AND rs.grid<3 ')
dbGetQuery(ergastdb, q)
q=paste0('SELECT COUNT(code) AS wins FROM drivers d JOIN results rs JOIN races r WHEre r.raceId=rs.raceId AND d.code IN ("hamilton") AND d.driverId=rs.driverId AND rs.grid<3 ')
dbGetQuery(ergastdb, q)
q=paste0('SELECT COUNT(driverId) AS wins FROM drivers d JOIN results rs JOIN races r WHEre r.raceId=rs.raceId AND d.driverId="HAM" AND d.driverId=rs.driverId AND rs.grid<3 ')
dbGetQuery(ergastdb, q)
q=paste0('SELECT COUNT(d.driverId) AS wins FROM drivers d JOIN results rs JOIN races r WHEre r.raceId=rs.raceId AND d.driverId="HAM" AND d.driverId=rs.driverId AND rs.grid<3 ')
dbGetQuery(ergastdb, q)
q=paste0('SELECT COUNT(d.driverId) AS wins FROM drivers d JOIN results rs JOIN races r WHEre r.raceId=rs.raceId AND d.driverId="hamilton" AND d.driverId=rs.driverId AND rs.grid<3 ')
dbGetQuery(ergastdb, q)
q=paste0('SELECT * AS wins FROM drivers d JOIN results rs JOIN races r WHEre r.raceId=rs.raceId  AND d.driverId=rs.driverId AND rs.grid>3 ')
dbGetQuery(ergastdb, q)
q=paste0('SELECT *  FROM drivers d JOIN results rs JOIN races r WHEre r.raceId=rs.raceId  AND d.driverId=rs.driverId AND rs.grid>3 ')
dbGetQuery(ergastdb, q)
q=paste0('SELECT COUNT(d.driverId) AS wins FROM drivers d JOIN results rs JOIN races r WHEre r.raceId=rs.raceId AND d.driverRef="hamilton" AND d.driverId=rs.driverId AND rs.grid<3 ')
dbGetQuery(ergastdb, q)
q=paste0('SELECT COUNT(d.driverId) AS wins FROM drivers d JOIN results rs JOIN races r WHEre r.raceId=rs.raceId AND d.driverRef="hamilton" AND d.driverId=rs.driverId AND rs.grid>3 ')
dbGetQuery(ergastdb, q)
q=paste0('SELECT COUNT(d.driverId) AS wins FROM drivers d JOIN results rs JOIN races r WHEre r.raceId=rs.raceId AND position=1 AND d.driverRef="hamilton" AND d.driverId=rs.driverId AND rs.grid>3 ')
dbGetQuery(ergastdb, q)
q=paste0('SELECT COUNT(d.driverId) AS wins FROM drivers d JOIN results rs JOIN races r WHEre r.raceId=rs.raceId AND position=1 AND d.driverRef="hamilton" AND d.driverId=rs.driverId  ')
dbGetQuery(ergastdb, q)
q=paste0('SELECT COUNT(d.driverId) AS wins FROM drivers d JOIN results rs JOIN races r WHEre r.raceId=rs.raceId AND position=1 AND d.driverRef="hamilton" AND d.driverId=rs.driverId AND rs.grid>3 ')
dbGetQuery(ergastdb, q)
q=paste0('SELECT COUNT(d.driverId) AS wins FROM drivers d JOIN results rs JOIN races r JOIN qualifying q WHEre r.raceId=rs.raceId AND r.raceId=q.raceId AND position=1 AND d.driverRef="hamilton" AND d.driverId=rs.driverId  AND d.driverId=q.driverId AND q.position>3 ')
dbGetQuery(ergastdb, q)
q=paste0('SELECT COUNT(d.driverId) AS wins FROM drivers d JOIN results rs JOIN races r JOIN qualifying q WHEre r.raceId=rs.raceId AND r.raceId=q.raceId AND rs.position=1 AND d.driverRef="hamilton" AND d.driverId=rs.driverId  AND d.driverId=q.driverId AND q.position>3 ')
dbGetQuery(ergastdb, q)
head(l2)
head(l2['rawtime']/l2['cuml'])
tail(l2['rawtime']/l2['cuml'])
library(f1djR)
lapTimes=lapsData.df(year,raceNum)
lb=battlemap_encoder(lapTimes)
head(lb)
la=rawLap_augment_laptimes(lapTimes)
head(la)
la=rawLap_augment_laptimes(lapTimes)
la['ff']
lb['ff']
lb['ff'] | lb['lap']
library(f1djR)
library(f1djR)
la=rawLap_augment_laptimes(lapTimes)
la=rawLap_augment_laptimes_base(lapTimes)
head(la)
names(la)
la
la[2:length(rawtime),'purplepc']
la[2:length(la),'purplepc']
library(f1djR)
la=rawLap_augment_laptimes_base(lapTimes)
df=la
df['purplepc'] = ifelse(df['purplepc']<1,NA,df['purplepc'])
df$purplepc = ifelse(df$purplepc<1,NA,df$purplepc)
head(df)
tail(df)
df=la
df$purplepc = ifelse(df$purplepc<1,NA,df$purplepc)
tail(df)
head(df)
library(f1djR)
la=rawLap_augment_laptimes_base(lapTimes)
head(la)
la=rawLap_augment_laptimes_base(lapTimes)
library(f1djR)
la=rawLap_augment_laptimes_base(lapTimes)
head(la)
tail(la)
laptimeFilePath: "~/Dropbox/wranglingf1datawithr/f1djR/scraping/bah18_p3laptimes.csv"
laptimeFilePath= "~/Dropbox/wranglingf1datawithr/f1djR/scraping/bah18_p3laptimes.csv"
plaps= read.csv(paste0(laptimeFilePath))
head(plaps)
library(f1djR)
la=rawLap_augment_laptimes_base(lapTimes)
head(plaps)
head(la)
la=rawLap_augment_laptimes_base(lapTimes,T)
head(la)
library(f1djR)
la=rawLap_augment_laptimes(lapTimes)
head(la)
la2=ddply(la,.(lap),summarise,medppc=median(purplepc),meanppc=mean(purplepc))
la2
library(f1djR)
la=rawLap_augment_laptimes(lapTimes)
la2=ddply(la,.(lap),summarise,medppc=median(purplepc),meanppc=mean(purplepc))
la2
head(la)
la2=ddply(la,.(lap),summarise,medlbpc=median(lapbestpc),meanlbpc=mean(lapbestpc),medppc=median(purplepc),meanppc=mean(purplepc))
head(la2)
ggplot(la2)+geom_point(aes(x=medppc,y=medlbpc),col='r')
ggplot(la2)+geom_point(aes(x=medppc,y=medlbpc),col='red')
ggplot(la2)+geom_text(aes(x=medppc,y=medlbpc,label=lap),col='red')
ggplot(la2)+geom_text(aes(x=medppc,y=meanlbpc,label=lap),col='red')+geom_text(aes(x=medppc,y=meanppc,label=lap),col='blue')
ggplot(la2)+geom_text(aes(x=medlbc,y=meanlbpc,label=lap),col='red')+geom_text(aes(x=medppc,y=meanppc,label=lap),col='blue')
ggplot(la2)+geom_text(aes(x=medlbpc,y=meanlbpc,label=lap),col='red')+geom_text(aes(x=medppc,y=meanppc,label=lap),col='blue')
lapTimesw=lapsData.df(2017,14)
la2=ddply(lapTimesw,.(lap),summarise,medlbpc=median(lapbestpc),meanlbpc=mean(lapbestpc),medppc=median(purplepc),meanppc=mean(purplepc))
la=rawLap_augment_laptimes(lapTimesw)
la2=ddply(la,.(lap),summarise,medlbpc=median(lapbestpc),meanlbpc=mean(lapbestpc),medppc=median(purplepc),meanppc=mean(purplepc))
ggplot(la2)+geom_text(aes(x=medlbpc,y=meanlbpc,label=lap),col='red')+geom_text(aes(x=medppc,y=meanppc,label=lap),col='blue')
ggplot(la[la$position==1,])+geom_point(aes(x=lap,y=rawtime))
ggplot(la[la$position==1,])+geom_point(aes(x=lapbest,y=lapbest))
ggplot(la[la$position==1,])+geom_text(aes(x=lapbest,y=lapbest, label=lap))
la2=ddply(la,.(lap),summarise,medlbpc=median(lapbestpc),meanlbpc=mean(lapbestpc),medppc=median(purplepc),meanppc=mean(purplepc),minlbpc=min(lapbestpc,na.rm = TRUE))
ggplot(la2)+geom_text(aes(x=minlbc,y=meanppc,label=lap),col='blue')
ggplot(la2)+geom_text(aes(x=minlbpc,y=meanppc,label=lap),col='blue')
la2=ddply(la,.(lap),summarise,medlbpc=median(lapbestpc),meanlbpc=mean(lapbestpc),medppc=median(purplepc),meanppc=mean(purplepc),minlb=min(lapbest,na.rm = TRUE))
ggplot(la2)+geom_text(aes(x=minlb,y=meanppc,label=lap),col='blue')
la2=ddply(la,.(lap),summarise,medlbpc=median(lapbestpc),meanlbpc=mean(lapbestpc),medppc=median(purplepc),meanppc=mean(purplepc),minlbpc=min(lapbestpc,na.rm = TRUE))
ggplot(la2)+geom_text(aes(x=medlbpc,y=meanlbpc,label=lap),col='red')+geom_text(aes(x=medppc,y=meanppc,label=lap),col='blue')
ggplot(la2)+geom_text(aes(x=medlbpc,y=meanppc,label=lap),col='blue')
ggplot(la2)+geom_text(aes(x=minlbpc,y=medlbpc,label=lap),col='blue')
la2=ddply(la,.(lap),summarise,medlbpc=median(lapbestpc),meanlbpc=mean(lapbestpc),medppc=median(purplepc),meanppc=mean(purplepc),minlb=min(lapbest,na.rm = TRUE),medlb=median(lapbest,na.rm = TRUE))
ggplot(la2)+geom_text(aes(x=medlb,y=medlbpc,label=lap),col='blue')
la2=ddply(la,.(lap),summarise,medlbpc=median(lapbestpc),meanlbpc=mean(lapbestpc),medppc=median(purplepc),meanppc=mean(purplepc),minlb=min(lapbest,na.rm = TRUE),medl=median(rawtime,na.rm = TRUE))
ggplot(la2)+geom_text(aes(x=medl,y=medlbpc,label=lap),col='blue')
ggplot(la2)+geom_text(aes(x=medl,y=minlb,label=lap),col='blue')
la['lbpfpc']=la['rawtime']/min(la['purple'])
la2=ddply(la,.(lap),summarise,medlbpc=median(lapbestpc),meanlbpc=mean(lapbestpc),medppc=median(purplepc),meanppc=mean(purplepc),minlb=min(lapbest,na.rm = TRUE),medlb=median(lapbest,na.rm = TRUE),lbpfpcmed=median(lbpfpc))
ggplot(la2)+geom_text(aes(x=medl,y=medlbpc,label=lap),col='blue')
ggplot(la2)+geom_text(aes(x=lbpfpcmed,y=medlbpc,label=lap),col='blue')
ggplot(la2)+geom_text(aes(x=lbpfpcmed,y=medlbpc,label=lap),col='blue')+geom_text(aes(label=ifelse((x>4*IQR(x)|y>4*IQR(y)),paste(label, "\n", x, ",", y),"")), hjust=1.1)
ggplot(la2)+geom_text(aes(x=lbpfpcmed,y=medlbpc,label=lap),col='blue')+geom_text(aes(label=ifelse((lbpfpcmed>4*IQR(lbpfpcmed)|y>medlbpc*IQR(medlbpc)),paste(label, "\n", x, ",", y),"")), hjust=1.1)
ggplot(la2)+geom_text(aes(x=lbpfpcmed,y=medlbpc,label=lap),col='blue')+geom_text(aes(label=ifelse((lbpfpcmed>4*IQR(lbpfpcmed)|y>medlbpc*IQR(medlbpc)),paste(lap, "\n", lbpfpcmed, ",", medlbpc),"")), hjust=1.1)
ggplot(la2)+geom_text(aes(x=lbpfpcmed,y=medlbpc,label=lap),col='blue')+geom_text(aes(label=ifelse((lbpfpcmed>4*IQR(lbpfpcmed)|medlbpc>4*IQR(medlbpc)),paste(lap, "\n", lbpfpcmed, ",", medlbpc),"")), hjust=1.1)
ggplot(la2,aes(x=lbpfpcmed,y=medlbpc,label=lap))+geom_text(col='blue')+geom_text(aes(label=ifelse((lbpfpcmed>4*IQR(lbpfpcmed)|medlbpc>4*IQR(medlbpc)),paste(lap, "\n", lbpfpcmed, ",", medlbpc),"")), hjust=1.1)
ggplot(la2,aes(x=lbpfpcmed,y=medlbpc,label=lap))+geom_text(col='blue')+geom_text(aes(label=ifelse((lbpfpcmed>4*IQR(lbpfpcmed)|medlbpc>4*IQR(medlbpc)),"A"), hjust=1.1)
)
library(f1djR)
library(f1djR)
bl=battlemap_encoder(lapTimes)
track_position_chart(bl)
bl=battlemap_encoder(lapTimesw)
track_position_chart(bl)
lapTimesv=lapsData.df(2018,1)
blv=battlemap_encoder(lapTimesv)
track_position_chart(blv)
install.packages(c("BH", "bindr", "bindrcpp", "dbplyr", "DT", "foreach", "htmlwidgets", "igraph", "irlba", "iterators", "mapproj", "NMF", "Rcpp", "registry", "repr", "rgdal", "RJDBC", "sp", "tibble", "viridis", "visNetwork", "webshot", "XML", "xts", "zoo"))
install.packages(c("backports", "BH", "blob", "broom", "callr", "chron", "cluster", "curl", "DBI", "devtools", "digest", "forcats", "ggthemes", "git2r", "gsubfn", "haven", "hexbin", "hms", "htmlwidgets", "httpuv", "knitr", "lubridate", "maps", "MASS", "Matrix", "mgcv", "nlme", "openssl", "plogr", "psych", "Rcpp", "reprex", "reshape2", "RJDBC", "rlang", "rmarkdown", "rpart", "rprojroot", "RSQLite", "Rttf2pt1", "selectr", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "viridisLite", "withr", "xml2", "yaml"), lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages(c("BH", "bindr", "bindrcpp", "dbplyr", "DT", "foreach", "htmlwidgets", "igraph", "irlba", "iterators", "mapproj", "NMF", "Rcpp", "registry", "repr", "rgdal", "RJDBC", "sp", "tibble", "viridis", "visNetwork", "webshot", "XML", "xts", "zoo"))
install.packages(c("BH", "bindr", "bindrcpp", "dbplyr", "DT", "foreach", "htmlwidgets", "igraph", "irlba", "iterators", "mapproj", "NMF", "Rcpp", "registry", "repr", "rgdal", "RJDBC", "sp", "tibble", "viridis", "visNetwork", "webshot", "XML", "xts", "zoo"))
install.packages(c("BH", "bindr", "bindrcpp", "dbplyr", "DT", "foreach", "htmlwidgets", "igraph", "irlba", "iterators", "mapproj", "NMF", "Rcpp", "registry", "repr", "rgdal", "RJDBC", "sp", "tibble", "viridis", "visNetwork", "webshot", "XML", "xts", "zoo"))
install.packages(c("backports", "BH", "blob", "broom", "callr", "chron", "cluster", "curl", "DBI", "devtools", "digest", "forcats", "ggthemes", "git2r", "gsubfn", "haven", "hexbin", "hms", "htmlwidgets", "httpuv", "knitr", "lubridate", "maps", "MASS", "Matrix", "mgcv", "nlme", "openssl", "plogr", "psych", "Rcpp", "reprex", "reshape2", "RJDBC", "rlang", "rmarkdown", "rpart", "rprojroot", "RSQLite", "Rttf2pt1", "selectr", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "viridisLite", "withr", "xml2", "yaml"), lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
lapTimesw=lapsData.df(2017,14)
library(f1djR)
lapTimesw=lapsData.df(2017,14)
library(dplyr)
install.packages("Rcpp")
install.packages("dplyr")
install.packages("Rcpp")
library(dplyr)
install.packages("Rcpp")
install.packages("Rcpp")
library(dplyr)
library(f1djR)
lapTimesw=lapsData.df(2017,14)
lapTimesa=lapsData.df(2018,1)
lapTimesb=lapsData.df(2018,3)
lw=rawLap_augment_laptimes(lapTimesw)
la=rawLap_augment_laptimes(lapTimes)
lb=rawLap_augment_laptimes(lapTimesb)
la=rawLap_augment_laptimes(lapTimesa)
track_position_chart(la)
lw=battlemap_encoder(lapTimesw)
la=battlemap_encoder(lapTimesa)
lb=battlemap_encoder(lapTimesb)
track_position_chart(la)
track_position_chart(lb)
track_position_chart(lw)
install.packages("ggmap", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
R.Version()
